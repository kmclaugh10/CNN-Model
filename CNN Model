import pandas as pd
import numpy as np
import torchtext
import nltk
import torch.nn as nn
import torch.nn.functional as F
import torch
import re
from torchtext import data
from torchtext.data import Field
import random
from torchtext import datasets
import torch.optim as optim
import time
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# reading in the data
# Data is available by scrape at https://www.enforcementtracker.com/
gdpr = pd.read_csv(file_path, sep="\t")

# Train_Test_Split cannot stratify if there is only one column
# ERROR Message: The least populated class in y has only 1 member, which is too few. The minimum number of groups for any class cannot be less than 2.
# Because of this just going to copy this from the Isle of Man, MALTA, AND CROATIA and append it to the end of the gdpr dataframe

isle_of_man_row = gdpr[gdpr.country == 'ISLE OF MAN']
malta_row = gdpr[gdpr.country == 'MALTA']
croatia_row = gdpr[gdpr.country == 'CROATIA']
gdpr = gdpr.append(isle_of_man_row)
gdpr = gdpr.append(malta_row)
gdpr = gdpr.append(croatia_row)

# gdpr.country.value_counts() # can check to see that it worked

# Creating column to keep track of numerical labels of classes

gdpr = gdpr[['summary', 'country']] 

# only need the columns 'summary' and 'country_num'
X = gdpr[['summary']]
y = gdpr['country']

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size= 0.7, 
                                                    random_state= 42,
                                                    stratify= y)

# putting the training and the validation data back together respectively
# Need to set the columns appropriately as well 'text' and 'label'
training = X_train
training['country'] = y_train
training.columns = ['text', 'label']


validation = X_test
validation['country'] = y_test
validation.columns = ['text', 'label']

# Code below can be uncommented if want to have an untouched test data
test = validation.sample(frac = 0.25,
                        random_state = 42,
                        replace = True)
test.columns = ['text', 'label']


# Writing each file to disk in desktop folder "GDPR Research/data"
# This is very important because it allows for easy access for the built in functions
training.to_csv(r'C:\Users\Keagan\Desktop\GDPR Research\data\training.csv')
validation.to_csv(r'C:\Users\Keagan\Desktop\GDPR Research\data\validation.csv')
test.to_csv(r'C:\Users\Keagan\Desktop\GDPR Research\data\test.csv')

TEXT = data.Field(sequential=True, lower=True)
LABEL = data.Field(sequential=False, use_vocab=True) # this use_vocab was False
fields = {'text': ('text', TEXT), 'label': ('label', LABEL)}

# using the built in function
train_data, valid_data, test_data = data.TabularDataset.splits(
    path=r'C:\Users\Keagan\Desktop\GDPR Research\data',
    train='training.csv',
    validation='validation.csv',
    test='test.csv',
    format='csv',
    fields=fields)

MAX_VOCAB_SIZE = 25_000
TEXT.build_vocab(train_data, 
                 max_size = MAX_VOCAB_SIZE, 
                 vectors = "glove.6B.100d", # have also tried "fasttext.en.300d"
                 unk_init = torch.Tensor.normal_
                 )

LABEL.build_vocab(train_data)

# Now defining the iterations with the batch sizing
BATCH_SIZE = 64
train_iterator, valid_iterator, test_iterator = data.BucketIterator.splits(
    (train_data, valid_data, test_data), 
    batch_size = BATCH_SIZE,
    sort=False
)

# model code from: https://github.com/tommy19970714/EmojiPrediction/issues/1
class CNN(nn.Module):
    def __init__(self, vocab_size, embedding_dim, n_filters, filter_sizes, output_dim, 
                 dropout, pad_idx):
        
        super().__init__()
        
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        
        self.convs = nn.ModuleList([
                                    nn.Conv2d(in_channels = 1, 
                                              out_channels = n_filters, 
                                              kernel_size = (fs, embedding_dim)) 
                                    for fs in filter_sizes
                                    ])
        
        self.fc = nn.Linear(len(filter_sizes) * n_filters, output_dim)
        
        self.dropout = nn.Dropout(dropout)
        
    def forward(self, text):
        
        #text = [sent len, batch size]
        
        text = text.permute(1, 0)
                
        #text = [batch size, sent len]
        
        embedded = self.embedding(text)
                
        #embedded = [batch size, sent len, emb dim]
        
        embedded = embedded.unsqueeze(1)
        
        #embedded = [batch size, 1, sent len, emb dim]
        
        conved = [F.relu(conv(embedded)).squeeze(3) for conv in self.convs]
            
        #conv_n = [batch size, n_filters, sent len - filter_sizes[n]]
        
        pooled = [F.max_pool1d(conv, conv.shape[2]).squeeze(2) for conv in conved]
        
        #pooled_n = [batch size, n_filters]
        
        cat = self.dropout(torch.cat(pooled, dim = 1))

        #cat = [batch size, n_filters * len(filter_sizes)]
            
        return self.fc(cat)


# Setting the parameters
INPUT_DIM = len(TEXT.vocab)
EMBEDDING_DIM = 100
N_FILTERS = 100
FILTER_SIZES = [2,3,4]
OUTPUT_DIM = len(LABEL.vocab)
DROPOUT = 0.5
PAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]

model = CNN(INPUT_DIM, EMBEDDING_DIM, N_FILTERS, FILTER_SIZES, OUTPUT_DIM, DROPOUT, PAD_IDX) 

# Setting Optimizers/criteria
optimizer = optim.Adam(model.parameters())
criterion = nn.CrossEntropyLoss()

# Important functions for model creation
def categorical_accuracy(preds, y):
    max_preds = preds.argmax(dim = 1, keepdim = True) # get the index of the max probability
    correct = max_preds.squeeze(1).eq(y)
    return correct.sum() / torch.FloatTensor([y.shape[0]])
    
def train(model, iterator, optimizer, criterion):
    
    epoch_loss = 0
    epoch_acc = 0
    
    model.train()
    
    for batch in iterator:
        
        optimizer.zero_grad()
        
        predictions = model(batch.text)
        
        loss = criterion(predictions, batch.label)
        
        acc = categorical_accuracy(predictions, batch.label)
        
        loss.backward()
        
        optimizer.step()
        
        epoch_loss += loss.item()
        epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)
   

# for testing
def evaluate(model, iterator, criterion):
    
    epoch_loss = 0
    epoch_acc = 0
    
    model.eval()
    
    with torch.no_grad():
    
        for batch in iterator:

            predictions = model(batch.text)
            
            loss = criterion(predictions, batch.label)
            
            acc = categorical_accuracy(predictions, batch.label)

            epoch_loss += loss.item()
            epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

# Training the model
N_EPOCHS = 50

best_valid_loss = float('inf')

for epoch in range(N_EPOCHS):

    start_time = time.time()
    
    train_loss, train_acc = train(model, train_iterator, optimizer, criterion)
    valid_loss, valid_acc = evaluate(model, valid_iterator, criterion)
    
    end_time = time.time()

    epoch_mins, epoch_secs = epoch_time(start_time, end_time)
    
    if valid_loss < best_valid_loss:
        best_valid_loss = valid_loss
        torch.save(model.state_dict(), 'cnn-model.pt')
    
    print(f'\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%')
    print(f'\t Val. Loss: {valid_loss:.3f} |  Val. Acc: {valid_acc*100:.2f}%')

# Comparing to test data
test_loss, test_acc = evaluate(model, test_iterator, criterion)
print("Loss:", test_loss)
print("Accuracy:", test_acc)

# Creating a confusion matrix for the test data
for batch in test_iterator:
    preds = model(batch.text)
    max_preds = preds.argmax(dim = 1, keepdim = True).flatten() # get the index of the max probability
    labels = batch.label

stacked = torch.stack(( labels, max_preds),dim=1)
cmt = torch.zeros(30,30, dtype=torch.int64)
for p in stacked:
    tl, pl = p.tolist()
    cmt[tl, pl] = cmt[tl, pl] + 1

# partially derived from https://deeplizard.com/learn/video/0LhiS6yu2qQ

import itertools

def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    #print(cm)
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)
    
    plt.tight_layout()
    
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt), horizontalalignment="center", color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

country_classes = [i for i in LABEL.vocab.itos]
plot_confusion_matrix(cmt, country_classes)







